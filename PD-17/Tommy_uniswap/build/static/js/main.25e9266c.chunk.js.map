{"version":3,"sources":["dai-logo.png","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","client","ApolloClient","link","HttpLink","uri","fetchOptions","mode","cache","InMemoryCache","DAI_QUERY","gql","_templateObject","ETH_PRICE_QUERY","_templateObject2","App","_useQuery","useQuery","ethLoading","loading","ethPriceData","data","_useQuery2","variables","tokenAddress","daiLoading","daiData","daiPriceInEth","tokens","derivedETH","daiTotalLiquidity","totalLiquidity","ethPriceInUSD","bundles","ethPrice","react_default","a","createElement","src","daiLogo","width","height","className","alt","parseFloat","toFixed","ReactDOM","render","react_common_esm","components_App","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+kBCQjC,IAAMC,EAAS,IAAIC,IAAa,CACrCC,KAAM,IAAIC,IAAS,CACjBC,IAAK,+DAEPC,aAAc,CACZC,KAAM,WAERC,MAAO,IAAIC,MAGPC,EAAYC,IAAHC,KASTC,EAAkBF,IAAHG,KA2CNC,MAnCf,WAAe,IAAAC,EACuCC,YAASJ,GAA5CK,EADJF,EACLG,QAA2BC,EADtBJ,EACgBK,KADhBC,EAEkCL,YAASP,EAAW,CACjEa,UAAW,CACTC,aAAc,gDAFDC,EAFJH,EAELH,QAA2BO,EAFtBJ,EAEgBD,KAMvBM,EAAgBD,GAAWA,EAAQE,OAAO,GAAGC,WAC7CC,EAAoBJ,GAAWA,EAAQE,OAAO,GAAGG,eACjDC,EAAgBZ,GAAgBA,EAAaa,QAAQ,GAAGC,SAE9D,OACEC,EAAAC,EAAAC,cAAA,WACUF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAASC,MAAM,MAAMC,OAAO,MAAMC,UAAU,OAAOC,IAAI,KACjER,EAAAC,EAAAC,cAAA,uBACa,IACVnB,GAAcO,EACX,wBACA,KACCmB,WAAWjB,GAAiBiB,WAAWZ,IAAgBa,QAAQ,IAEtEV,EAAAC,EAAAC,cAAA,iCACuB,IACpBZ,EACG,wBAEAmB,WAAWd,GAAmBe,QAAQ,cCxD5DC,IAASC,OACPZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAgB/C,OAAQA,GACtBkC,EAAAC,EAAAC,cAACY,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.25e9266c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dai-logo.64e003f0.png\";","import React, {} from 'react'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport daiLogo from '../dai-logo.png'\r\n\r\nexport const client = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\r\n  }),\r\n  fetchOptions: {\r\n    mode: 'no-cors'\r\n  },\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nconst DAI_QUERY = gql`\r\n  query tokens($tokenAddress: Bytes!) {\r\n    tokens(where: { id: $tokenAddress }) {\r\n      derivedETH\r\n      totalLiquidity\r\n    }\r\n  }\r\n`\r\n\r\nconst ETH_PRICE_QUERY = gql`\r\n  query bundles {\r\n    bundles(where: { id: \"1\" }) {\r\n      ethPrice\r\n    }\r\n  }\r\n`\r\n\r\nfunction App() {\r\n  const { loading: ethLoading, data: ethPriceData } = useQuery(ETH_PRICE_QUERY)\r\n  const { loading: daiLoading, data: daiData } = useQuery(DAI_QUERY, {\r\n    variables: {\r\n      tokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f'\r\n    }\r\n  })\r\n\r\n  const daiPriceInEth = daiData && daiData.tokens[0].derivedETH\r\n  const daiTotalLiquidity = daiData && daiData.tokens[0].totalLiquidity\r\n  const ethPriceInUSD = ethPriceData && ethPriceData.bundles[0].ethPrice\r\n\r\n  return (\r\n    <div>\r\n              <div>\r\n                <img src={daiLogo} width=\"150\" height=\"150\" className=\"mb-4\" alt=\"\" />\r\n                <h2>\r\n                  Dai price:{' '}\r\n                  {ethLoading || daiLoading\r\n                    ? 'Loading token data...'\r\n                    : '$' +\r\n                      (parseFloat(daiPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(5)}\r\n                </h2>\r\n                <h2>\r\n                  Dai total liquidity:{' '}\r\n                  {daiLoading\r\n                    ? 'Loading token data...'\r\n                    :\r\n                      parseFloat(daiTotalLiquidity).toFixed(2)}\r\n                </h2>\r\n              </div>\r\n            </div>\r\n  );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { client } from './components/App'\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}